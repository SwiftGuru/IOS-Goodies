//
//  Created by Ihor Rudych on 5/16/17.
//  Copyright Â© 2017 Ihor Rudych. All rights reserved.
//

import UIKit
import QuartzCore
import SceneKit

class GameViewController: UIViewController, SCNPhysicsContactDelegate {
    
    @IBOutlet var sceneView: SCNView!
    //var sceneView: SCNView!
    var ground: SCNNode!
    var light: SCNNode!
    var camera: SCNNode!
    var button: SCNNode!
    var balla: SCNNode!
    var ballb: SCNNode!

    override func viewDidLoad() {
        super.viewDidLoad()
        
        sceneView = SCNView(frame: self.view.frame)

        sceneView.scene = SCNScene()
        sceneView.scene?.physicsWorld.contactDelegate = self
        self.view.addSubview(sceneView)
        
        //tap tap tap
        let tapRecognizer = UITapGestureRecognizer()
        tapRecognizer.numberOfTapsRequired = 1
        tapRecognizer.numberOfTouchesRequired = 1
        tapRecognizer.addTarget(self, action: #selector (self.sceneTapped))
        sceneView.gestureRecognizers = [tapRecognizer]
        
        //some ground
        let groundGeometry = SCNFloor()
        groundGeometry.reflectivity = 0
        let groundMaterial = SCNMaterial()
        groundMaterial.diffuse.contents = UIColor.blue
        groundGeometry.materials = [groundMaterial]
        ground = SCNNode(geometry: groundGeometry)
        
        //smile
        
        let camera = SCNCamera()
        camera.zFar = 10000
        self.camera = SCNNode()
        self.camera.camera = camera
        self.camera.position = SCNVector3(x: -20, y: 15, z: 20)
        
        let constraint = SCNLookAtConstraint(target: ground)
        constraint.isGimbalLockEnabled = true
        self.camera.constraints = [constraint]
        
        //who turned off the light
        
        let ambientLight = SCNLight()
        ambientLight.color = UIColor.darkGray
        ambientLight.type = SCNLight.LightType.ambient
        self.camera.light = ambientLight
        
        //Spot it
        let spotLight = SCNLight()
        spotLight.type = SCNLight.LightType.spot
        spotLight.castsShadow = true
        spotLight.spotInnerAngle = 70.0
        spotLight.spotOuterAngle = 90.0
        spotLight.zFar = 500
        light = SCNNode()
        light.light = spotLight
        light.position = SCNVector3(x: 0, y: 25, z: 25)
        light.constraints = [constraint]
        
        //roll out the balls - he he
        
        let sphereGeometry = SCNSphere(radius: 1.5)
        let sphereMaterial = SCNMaterial()
        sphereMaterial.diffuse.contents = UIColor.green
        sphereGeometry.materials = [sphereMaterial]
        
        balla = SCNNode(geometry: sphereGeometry)
        balla.position = SCNVector3(x: -8, y: 1.5, z: 0)
        
        ballb = SCNNode(geometry: sphereGeometry)
        ballb.position = SCNVector3(x: 15, y: 1.5, z: 0)
        
        //Butttttton
        
        let buttonGeometry = SCNBox(width: 4, height: 1, length: 4, chamferRadius: 0)
        let buttonMaterial = SCNMaterial()
        buttonMaterial.diffuse.contents = UIColor.cyan
        buttonGeometry.materials = [buttonMaterial]
        button = SCNNode(geometry: buttonGeometry)
        button.position = SCNVector3(x: 0, y: 0.5, z: 4)
        
        
        //colideeee
        
        let groundShape = SCNPhysicsShape(geometry: groundGeometry, options: nil)
        let groundBody = SCNPhysicsBody(type: .kinematic, shape: groundShape)
        ground.physicsBody = groundBody
        
        let gravityField = SCNPhysicsField.radialGravity()
        gravityField.strength = 0
        balla.physicsField = gravityField
        
        let shape = SCNPhysicsShape(geometry: sphereGeometry, options: nil)
        let sphere1Body = SCNPhysicsBody(type: .kinematic, shape: shape)
        sphere1Body.contactTestBitMask = 1
        
        balla.physicsBody = sphere1Body
        
        
        let sphere2Body = SCNPhysicsBody(type: .dynamic, shape: shape)
        sphere2Body.contactTestBitMask = 1
        ballb.physicsBody = sphere2Body
        
        
        sceneView.scene?.rootNode.addChildNode(self.camera)
        sceneView.scene?.rootNode.addChildNode(ground)
        sceneView.scene?.rootNode.addChildNode(light)
        sceneView.scene?.rootNode.addChildNode(button)
        sceneView.scene?.rootNode.addChildNode(balla)
        sceneView.scene?.rootNode.addChildNode(ballb)
        
        
        
        
    }
    
    func sceneTapped(recognizer: UITapGestureRecognizer) {
        
        let location = recognizer.location(in: sceneView)
        
        let hitResult = sceneView.hitTest(location, options: nil)
        if hitResult.count > 0 {
            let result = hitResult[0] as SCNHitTestResult
            let node = result.node
           
            if node == button {
                SCNTransaction.begin()
                SCNTransaction.animationDuration = 0.5
                let materials = node.geometry!.materials 
                let material = materials[0]
                material.diffuse.contents = UIColor.red
                
                SCNTransaction.commit()
                
                let action = SCNAction.moveBy(x: 0, y: -0.8, z: 0, duration: 0.5)
                node.runAction(action)
                
                balla.physicsField?.strength = 750
            }
        }
        
    }
   /*
    func physicsWorld(_ world: SCNPhysicsWorld, didBegin contact: SCNPhysicsContact) {
        if (contact.nodeA == balla || contact.nodeA == ballb) && (contact.nodeB == balla || contact.nodeB == ballb) {
            let partSystem = SCNParticleSystem(named: "Explode", inDirectory: nil)
            let systemNode = SCNNode()
            systemNode.addParticleSystem(partSystem!)
            systemNode.position = contact.nodeA.position
            sceneView.scene?.rootNode.addChildNode(systemNode)
            
            contact.nodeA.removeFromParentNode()
            contact.nodeB.removeFromParentNode()
        }
    } */
    func physicsWorld(_ world: SCNPhysicsWorld, didUpdate contact: SCNPhysicsContact) {
        if (contact.nodeA == balla || contact.nodeA == ballb) && (contact.nodeB == balla || contact.nodeB == ballb) {
            let partSystem = SCNParticleSystem(named: "Explode", inDirectory: nil)
            let systemNode = SCNNode()
            systemNode.addParticleSystem(partSystem!)
            systemNode.position = contact.nodeA.position
            sceneView.scene?.rootNode.addChildNode(systemNode)
            
            contact.nodeA.removeFromParentNode()
            contact.nodeB.removeFromParentNode()
            
        }
    }
    
  override var shouldAutorotate: Bool {
        return true
    }
    
    override var prefersStatusBarHidden: Bool {
        return true
    }
    
    override var supportedInterfaceOrientations: UIInterfaceOrientationMask {
        if UIDevice.current.userInterfaceIdiom == .phone {
            return .allButUpsideDown
        } else {
            return .all
        }
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Release any cached data, images, etc that aren't in use.
    }

}
